{"version":3,"sources":["app.js","serviceWorker.js","index.js"],"names":["pressed","window","addEventListener","types","Types","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeQueue","saveChange","type","setState","value","onChange","checkOnHover","state","_this2","_this$state","_this$props","mark","model","react_default","a","createElement","className","map","key","name","e","onMouseOver","checked","React","Component","App","keys","json","app_Types","Boolean","location","hostname","match","ReactDOM","render","src_app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"86iBAIIA,GAAU,EACdC,OAAOC,iBAAiB,YAAa,kBAAMF,GAAU,IACrDC,OAAOC,iBAAiB,UAAW,kBAAMF,GAAU,IAEnD,IAAIG,EAAQ,CACV,QACA,YACA,MACA,UACA,WACA,WACA,OACA,SAGIC,cACJ,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,YAAc,GARMP,EAUpBQ,WAAa,SAACC,GACZT,EAAKU,SAAS,CAACC,MAAOF,KAXJT,EAcpBY,SAAW,SAACH,GACVT,EAAKQ,WAAWC,IAfET,EAkBpBa,aAAe,SAACJ,GACVf,GACFM,EAAKQ,WAAWC,IAlBlBT,EAAKc,MAAQ,CACXjB,MAAOA,EACPc,MAAO,MAJSX,wEAwBV,IAAAe,EAAAZ,KAAAa,EACeb,KAAKW,MAAtBjB,EADEmB,EACFnB,MAAOc,EADLK,EACKL,MADLM,EAEcd,KAAKJ,MAArBmB,EAFED,EAEFC,KAAMC,EAFJF,EAEIE,MAEZ,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAEjB1B,EAAM2B,IAAI,SAACf,EAAMgB,GAAP,OACRL,EAAAC,EAAAC,cAAA,MAAIG,IAAKA,GACPL,EAAAC,EAAAC,cAAA,SAAOb,KAAK,QACViB,KAAMR,EAAOC,EACbP,SAAU,SAAAe,GAAC,OAAIZ,EAAKH,SAASH,IAC7BmB,YAAa,SAAAD,GAAC,OAAIZ,EAAKF,aAAaJ,IACpCE,MAAOF,EACPoB,QAASpB,IAASE,IACpBS,EAAAC,EAAAC,cAAA,YAAOb,cAvCCqB,IAAMC,WA+EXC,EAhCL,kBACRZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAEVtB,OAAOgC,KAAKC,GAAMV,IAAI,SAACN,EAAMO,GAAP,MACpB,CACEL,EAAAC,EAAAC,cAAA,MAAIG,IAAKA,GACPL,EAAAC,EAAAC,cAAA,UAAMJ,GAENE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAEVtB,OAAOgC,KAAKC,EAAKhB,IAAOM,IAAI,SAACL,EAAOM,GAAR,OAC1BL,EAAAC,EAAAC,cAAA,MAAIG,IAAKA,GACPL,EAAAC,EAAAC,cAAA,UAAMH,GAENC,EAAAC,EAAAC,cAACa,EAAD,CAAOjB,KAAMA,EAAMC,MAAOA,SAMpCC,EAAAC,EAAAC,cAAA,MAAIG,IAAI,aC/EAW,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ecfa774f.chunk.js","sourcesContent":["import React from 'react'\nimport './app.css'\nimport json from './data.json'\n\nvar pressed = false\nwindow.addEventListener('mousedown', () => pressed = true)\nwindow.addEventListener('mouseup', () => pressed = false)\n\nvar types = [\n  'Sedan',\n  'Hatchback',\n  'SUV',\n  'Big SUV',\n  'Mini SUV',\n  'Mini Van',\n  'Bike',\n  'Other'\n]\n\nclass Types extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      types: types,\n      value: null\n    }\n  }\n\n  changeQueue = {}\n\n  saveChange = (type) => {\n    this.setState({value: type})\n  }\n  \n  onChange = (type) => {\n    this.saveChange(type)\n  }\n  \n  checkOnHover = (type) => {\n    if (pressed) {\n      this.saveChange(type)\n    }\n  }\n  \n  render () {\n    var { types, value } = this.state\n    var { mark, model } = this.props\n    \n    return <dl className='types'>\n      {\n        types.map((type, key) =>\n          <dt key={key}>\n            <input type='radio' \n              name={mark + model} \n              onChange={e => this.onChange(type)}\n              onMouseOver={e => this.checkOnHover(type)}\n              value={type}\n              checked={type === value} />\n            <span>{type}</span>\n          </dt>\n        )\n      }\n    </dl>\n  }\n}\n\nvar App = () =>\n  <div className='app'>\n    <h1>Model Types</h1>\n\n    <hr />\n\n    <dl className='marks'>\n      {\n        Object.keys(json).map((mark, key) =>\n          [\n            <dt key={key}>\n              <h2>{ mark }</h2>\n\n              <dl className='models'>\n                {\n                  Object.keys(json[mark]).map((model, key) =>\n                    <dt key={key}>\n                      <h4>{ model }</h4>\n\n                      <Types mark={mark} model={model} />\n                    </dt>\n                  )\n                }\n              </dl>\n            </dt>,\n            <hr key='hr' />\n          ]\n        )\n      }\n    </dl>\n  </div>\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}